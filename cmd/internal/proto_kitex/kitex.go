package proto_kitex

import (
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	contextPackage = protogen.GoImportPath("context")
	errPkg         = protogen.GoImportPath("errors")
	fmtPkg         = protogen.GoImportPath("fmt")
	clientPkg      = protogen.GoImportPath("github.com/cloudwego/kitex/client")
	calloptPkg     = protogen.GoImportPath("github.com/cloudwego/kitex/client/callopt")
	kitexPkg       = protogen.GoImportPath("github.com/cloudwego/kitex/pkg/serviceinfo")
	streamPkg      = protogen.GoImportPath("github.com/cloudwego/kitex/pkg/streaming")
	protoPkg       = protogen.GoImportPath("google.golang.org/protobuf/proto")
)

const deprecationComment = "// Deprecated: Do not use."

func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}

	filename := file.GeneratedFilenamePrefix + ".pb.kitex.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-kitex. DO NOT EDIT.")
	g.P("// version: ")
	g.P(fmt.Sprintf("// - protoc-gen-go-kitex %s", version))
	g.P("// - protoc              ", protocVersion(gen))
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileConent(file, g)
	return g
}

func generateFileConent(file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}

	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the kitex package it is being compiled against.")
	g.P()
	g.P(`var errInvalidMessageType = `, errPkg.Ident("New"), `("invalid message type for service method handler")`)
	for _, service := range file.Services {
		genService(file, g, service)
	}
}

func genService(file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	// Service interface.
	serverType := service.GoName
	g.P("// ", serverType, " is the handler API for ", service.GoName, " service.")
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	g.Annotate(serverType, service.Location)
	g.P("type ", serverType, " interface {")

	for _, method := range service.Methods {
		g.Annotate(serverType+"."+method.GoName, method.Location)
		if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
			g.P(deprecationComment)
		}
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			g.P(method.Comments.Leading, serverStreamMethodSignature(service.GoName, g, method))
		} else {
			g.P(method.Comments.Leading, methodSignature(g, method))
		}
	}
	g.P("}")
	g.P()

	// streamMethodInterface
	for _, method := range service.Methods {
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			streamInterfaceSignature(service.GoName, g, method)
		}
	}

	// xxxServiceInfo
	serviceInfo := lowwerName(serverType) + "ServiceInfo"
	g.P("func GetServiceInfo() *", kitexPkg.Ident("ServiceInfo"), " {")
	g.P("return ", serviceInfo)
	g.P("}")
	g.P()
	g.P("func serviceInfo() *", kitexPkg.Ident("ServiceInfo"), " {")
	g.P("return ", serviceInfo)
	g.P("}")
	g.P()

	g.P("var ", lowwerName(serverType)+"ServiceInfo = NewServiceInfo()")
	g.P()
	// NewServcieInfo
	g.P("func NewServiceInfo() *", kitexPkg.Ident("ServiceInfo"), " {")
	g.P(`serviceName := "`, serverType, `"`)
	g.P(fmt.Sprintf("handlerType := (*%s)(nil)", serverType))
	g.P("methods := map[string]", kitexPkg.Ident("MethodInfo"), "{")
	for _, method := range service.Methods {
		name := method.GoName
		lowwer := lowwerName(name)
		g.P(`"`, name, `":`, kitexPkg.Ident("NewMethodInfo"), fmt.Sprintf("(%sHandler, new%sArgs, new%sResult, false),", lowwer, name, name))
	}
	g.P("}")
	g.P("extra := map[string]interface{}{")
	g.P(`"PackageName": "`, file.GoPackageName, `",`)
	g.P("}")
	g.P("svcInfo := &", kitexPkg.Ident("ServiceInfo"), "{")
	g.P("ServiceName:", "serviceName,")
	g.P("HandlerType:", "handlerType,")
	g.P("Methods:", "methods,")
	g.P("PayloadCodec:", kitexPkg.Ident("Protobuf"), ",")
	g.P("Extra:", "extra,")
	g.P("}")
	g.P("return svcInfo")
	g.P("}")

	// gen xxxHandler
	for _, method := range service.Methods {
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			genStreamMethodHandler(g, method, serverType)
		} else {
			genMethodHandler(g, method, serverType)
		}
		genMethodArgs(g, method, serverType)
		genMethodResult(g, method, serverType)
	}

	// client struct
	g.P("type KClient struct {")
	g.P("c ", clientPkg.Ident("Client"))
	g.P("}")
	g.P()
	// new Service Client
	g.P("func NewServiceClient(c ", clientPkg.Ident("Client"), ") *KClient {")
	g.P("return &KClient{ c: c }")
	g.P("}")
	g.P()
	// client method implementations
	for _, method := range service.Methods {
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			genClientStreamMethod(g, method, serverType)
		} else {
			genClientMethod(g, method)
		}
	}

	// Client
	g.P("// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.")
	g.P("type Client interface {")
	for _, method := range service.Methods {
		methodName := method.Desc.Name()
		if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
			g.P(deprecationComment)
		}
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			methodStr := method.GoName + "(ctx " + g.QualifiedGoIdent(contextPackage.Ident("Context"))
			if !method.Desc.IsStreamingClient() {
				methodStr += ", req *" + method.Input.GoIdent.GoName
			}
			methodStr += ", callOptions ..." + g.QualifiedGoIdent(calloptPkg.Ident("Option")) + ")"
			streamStr := serverType + "_" + method.GoName + "Client"
			methodStr += " (stream " + streamStr + ", err error)"
			g.P(methodStr)
		} else {
			g.P(methodName+"(ctx ", contextPackage.Ident("Context"), ", req *", g.QualifiedGoIdent(method.Input.GoIdent), ", callOptions ...", calloptPkg.Ident("Option"), ") (r *", g.QualifiedGoIdent(method.Output.GoIdent), ", err error)")
		}
	}
	g.P("}")

	// stream client interface
	g.P()
	for _, method := range service.Methods {
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			streamInterface := serverType + "_" + method.GoName + "Client"
			g.P("type ", streamInterface, " interface {")
			g.P(g.QualifiedGoIdent(streamPkg.Ident("Stream")))
			if method.Desc.IsStreamingClient() {
				g.P("Send(*", method.Input.GoIdent, ") error")
				if !method.Desc.IsStreamingServer() {
					g.P("CloseAndRecv() (*", method.Output.GoIdent, ", error)")
				}
			}
			if method.Desc.IsStreamingServer() {
				g.P("Recv() (*", method.Output.GoIdent, ", error)")
			}

			g.P("}")
		}
	}

	g.P()
	clientName := serverType + "Client"
	g.P("type ", clientName, " struct {")
	g.P("*KClient")
	g.P("}")

	for _, method := range service.Methods {
		methodName := method.Desc.Name()
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			methodStr := method.GoName + "(ctx " + g.QualifiedGoIdent(contextPackage.Ident("Context"))
			if !method.Desc.IsStreamingClient() {
				methodStr += ", req *" + method.Input.GoIdent.GoName
			}
			methodStr += ", callOptions ..." + g.QualifiedGoIdent(calloptPkg.Ident("Option")) + ")"
			streamStr := serverType + "_" + method.GoName + "Client"
			methodStr += " (stream " + streamStr + ", err error)"
			g.P("func (p *", clientName, ") ", methodStr, " {")
			g.P("ctx = ", clientPkg.Ident("NewCtxWithCallOptions"), "(ctx, callOptions)")
			if method.Desc.IsStreamingClient() {
				g.P("return p.KClient.", methodName, "(ctx)")
			} else {
				g.P("return p.KClient.", methodName, "(ctx, req)")
			}
			g.P("}")
		} else {
			g.P("func (p *", clientName, ") ", methodName, "(ctx ", contextPackage.Ident("Context"), ", req *", g.QualifiedGoIdent(method.Input.GoIdent), ", callOptions ...", calloptPkg.Ident("Option"), ") (*", g.QualifiedGoIdent(method.Output.GoIdent), ", error) {")
			g.P("ctx = ", clientPkg.Ident("NewCtxWithCallOptions"), "(ctx, callOptions)")
			g.P("return p.KClient.", methodName, "(ctx, req)")
			g.P("}")
		}
		g.P()
	}
}

func genStreamMethodHandler(g *protogen.GeneratedFile, method *protogen.Method, serviceName string) {
	methodName := method.GoName
	handlerFunc := lowwerName(methodName) + "Handler"
	g.P("func ", handlerFunc, "(ctx context.Context, handler interface{}, arg, result interface{}) error {")
	g.P("st := arg.(*streaming.Args).Stream")
	name := lowwerName(serviceName) + methodName + "Server"
	g.P("stream := &", name, "{st}")

	if method.Desc.IsStreamingClient() && !method.Desc.IsStreamingServer() {
		g.P("return handler.(", serviceName, ").", methodName, "(stream)")
	}
	if method.Desc.IsStreamingServer() && !method.Desc.IsStreamingClient() {
		g.P("req := new(", g.QualifiedGoIdent(method.Input.GoIdent), ")")
		g.P("if err := st.RecvMsg(req); err != nil {")
		g.P("return err")
		g.P("}")
		g.P("return handler.(", serviceName, ").", methodName, "(req, stream)")
	}
	if method.Desc.IsStreamingClient() && method.Desc.IsStreamingServer() {
		g.P("return handler.(", serviceName, ").", methodName, "(stream)")
	}
	g.P("}")
	g.P()

	// defination xxxxServer
	g.P("type ", name, " struct {")
	g.P(g.QualifiedGoIdent(streamPkg.Ident("Stream")))
	g.P("}")
	g.P()

	if method.Desc.IsStreamingClient() {
		g.P("func (x *", name, ") Recv() (*", g.QualifiedGoIdent(method.Input.GoIdent), ", error) {")
		g.P("m := new(", g.QualifiedGoIdent(method.Input.GoIdent), ")")
		g.P("return m, x.Stream.RecvMsg(m)")
		g.P("}")
		g.P()
	}
	if method.Desc.IsStreamingServer() {
		g.P("func (x *", name, ") Send(m *", g.QualifiedGoIdent(method.Output.GoIdent), ") error {")
		g.P("return x.Stream.SendMsg(m)")
		g.P("}")
		g.P()
	}

	if method.Desc.IsStreamingClient() && !method.Desc.IsStreamingServer() {
		g.P("func (x *", name, ") SendAndClose(m *", g.QualifiedGoIdent(method.Output.GoIdent), ") error {")
		g.P("return x.Stream.SendMsg(m)")
		g.P("}")
		g.P()
	}
}

func genMethodHandler(g *protogen.GeneratedFile, method *protogen.Method, serviceName string) {
	methodName := method.GoName
	handlerFunc := lowwerName(methodName) + "Handler"
	g.P("func ", handlerFunc, "(ctx context.Context, handler interface{}, arg, result interface{}) error {")
	g.P("switch s := arg.(type) {")
	g.P("case *", streamPkg.Ident("Args"), ":")
	g.P("st := s.Stream")
	g.P("req := new(", g.QualifiedGoIdent(method.Input.GoIdent), ")")
	g.P("if err := st.RecvMsg(req); err != nil {")
	g.P("return err")
	g.P("}")
	g.P("resp, err := handler.(", serviceName, ").", methodName, "(ctx, req)")
	g.P("if err != nil {")
	g.P("return err")
	g.P("}")
	g.P("return st.SendMsg(resp)")
	g.P("case *", methodName, "Args:")
	g.P("success, err := handler.(", serviceName, ").", methodName, "(ctx, s.Req)")
	g.P("if err != nil {")
	g.P("return err")
	g.P("}")
	g.P("realResult := result.(*", methodName, "Result)")
	g.P("realResult.Success = success")
	g.P("return nil")
	g.P("default:")
	g.P("return errInvalidMessageType")
	g.P("}")
	g.P("}")
	g.P()
}

func genMethodArgs(g *protogen.GeneratedFile, method *protogen.Method, serviceName string) {
	methodName := method.GoName
	argsName := methodName + "Args"
	// xxxxArgs struct
	g.P("type ", argsName, " struct {")
	g.P("Req *", g.QualifiedGoIdent(method.Input.GoIdent))
	g.P("}")
	g.P()
	// newXxxArgs()
	g.P("func new", argsName, "() interface{} {")
	g.P("return &", argsName, "{}")
	g.P("}")
	g.P()
	// fastRead
	// g.P("func (p *", argsName, ") FastRead(buf []byte, _type int8, number int32) (n int, err error) {")
	// g.P("if !p.IsSetReq() {")
	// g.P("p.Req = new(", g.QualifiedGoIdent(method.Input.GoIdent), ")")
	// g.P("}")
	// g.P("return p.Req.FastRead(buf, _type, number)")
	// g.P("}")
	// g.P()

	// fastWrite
	// g.P("func (p *", argsName, ") FastWrite(buf []byte) (n int) {")
	// g.P("if !p.IsSetReq() {")
	// g.P("return 0")
	// g.P("}")
	// g.P("return p.Req.FastWrite(buf)")
	// g.P("}")
	// g.P()

	// size
	// g.P("func (p *", argsName, ") Size() (n int) {")
	// g.P("if !p.IsSetReq() {")
	// g.P("return 0")
	// g.P("}")
	// g.P("return p.Req.Size()")
	// g.P("}")
	// g.P()

	// marshal
	g.P("func (p *", argsName, ") Marshal(out []byte) ([]byte, error) {")
	g.P("if !p.IsSetReq() {")
	g.P(`return out, `, errPkg.Ident("New"), `("no req in `, argsName, `")`)
	g.P("}")
	g.P("return ", protoPkg.Ident("Marshal"), "(p.Req)")
	g.P("}")
	g.P()
	// unMarshal
	g.P("func (p *", argsName, ") Unmarshal(in []byte) error {")
	g.P("msg := new(", g.QualifiedGoIdent(method.Input.GoIdent), ")")
	g.P("if err := ", protoPkg.Ident("Unmarshal"), "(in, msg); err != nil {")
	g.P("return err")
	g.P("}")
	g.P("p.Req = msg")
	g.P("return nil")
	g.P("}")
	g.P()

	g.P("var ", argsName, "_Req_DEFAULT *", g.QualifiedGoIdent(method.Input.GoIdent))
	g.P()
	// GetReq
	g.P("func (p *", argsName, ") GetReq() *", g.QualifiedGoIdent(method.Input.GoIdent), "{")
	g.P("if !p.IsSetReq() {")
	g.P("return ", argsName, "_Req_DEFAULT")
	g.P("}")
	g.P("return p.Req")
	g.P("}")
	g.P()
	// IsSetReq
	g.P("func (p *", argsName, ") IsSetReq() bool {")
	g.P("return p.Req != nil")
	g.P("}")
	g.P()

	// GetFirstArgument
	g.P("func (p *", argsName, ") GetFirstArgument() interface{} {")
	g.P("return p.Req")
	g.P("}")
	g.P()
}

func genMethodResult(g *protogen.GeneratedFile, method *protogen.Method, serviceName string) {
	methodName := method.GoName
	resultName := methodName + "Result"
	// xxxxResult struct
	g.P("type ", resultName, " struct {")
	g.P("Success *", g.QualifiedGoIdent(method.Output.GoIdent))
	g.P("}")
	g.P()
	// newXxxReuslt()
	g.P("func new", resultName, "() interface{} {")
	g.P("return &", resultName, "{}")
	g.P("}")
	g.P()
	// fastRead
	// g.P("func (p *", resultName, ") FastRead(buf []byte, _type int8, number int32) (n int, err error) {")
	// g.P("if !p.IsSetSuccess() {")
	// g.P("p.Success = new(", g.QualifiedGoIdent(method.Output.GoIdent), ")")
	// g.P("}")
	// g.P("return p.Success.FastRead(buf, _type, number)")
	// g.P("}")
	// g.P()

	// fastWrite
	// g.P("func (p *", resultName, ") FastWrite(buf []byte) (n int) {")
	// g.P("if !p.IsSetSuccess() {")
	// g.P("return 0")
	// g.P("}")
	// g.P("return p.Success.FastWrite(buf)")
	// g.P("}")
	// g.P()

	// size
	// g.P("func (p *", resultName, ") Size() (n int) {")
	// g.P("if !p.IsSetSuccess() {")
	// g.P("return 0")
	// g.P("}")
	// g.P("return p.Success.Size()")
	// g.P("}")
	// g.P()

	// marshal
	g.P("func (p *", resultName, ") Marshal(out []byte) ([]byte, error) {")
	g.P("if !p.IsSetSuccess() {")
	g.P(`return out, `, errPkg.Ident("New"), `("no req in `, resultName, `")`)
	g.P("}")
	g.P("return ", protoPkg.Ident("Marshal"), "(p.Success)")
	g.P("}")
	g.P()
	// unMarshal
	g.P("func (p *", resultName, ") Unmarshal(in []byte) error {")
	g.P("msg := new(", g.QualifiedGoIdent(method.Output.GoIdent), ")")
	g.P("if err := ", protoPkg.Ident("Unmarshal"), "(in, msg); err != nil {")
	g.P("return err")
	g.P("}")
	g.P("p.Success = msg")
	g.P("return nil")
	g.P("}")
	g.P()

	g.P("var ", resultName, "_Success_DEFAULT *", g.QualifiedGoIdent(method.Output.GoIdent))
	g.P()
	// GetSuccess
	g.P("func (p *", resultName, ") GetSuccess() *", g.QualifiedGoIdent(method.Output.GoIdent), "{")
	g.P("if !p.IsSetSuccess() {")
	g.P("return ", resultName, "_Success_DEFAULT")
	g.P("}")
	g.P("return p.Success")
	g.P("}")
	g.P()
	// SetSuccess
	g.P("func (p *", resultName, ") SetSuccess(x interface{}) {")
	g.P("p.Success = x.(*", g.QualifiedGoIdent(method.Output.GoIdent), ")")
	g.P("}")
	g.P()

	// IsSetSuccess
	g.P("func (p *", resultName, ") IsSetSuccess() bool {")
	g.P("return p.Success != nil")
	g.P("}")
	g.P()

	// GetResult
	g.P("", "func (p *", resultName, ") GetResult() interface{} {")
	g.P("return p.Success")
	g.P("}")
}

func genClientStreamMethod(g *protogen.GeneratedFile, method *protogen.Method, serviceName string) {
	if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
		g.P(deprecationComment)
	}
	g.P("func (c *KClient)", clientStreamMethodSignature(serviceName, g, method), "{")
	g.P("streamClient, ok := c.c.(client.Streaming)")
	g.P("if !ok {")
	g.P("return nil, ", fmtPkg.Ident("Errorf"), "(\"client not support streaming\")")
	g.P("}")
	g.P()

	g.P("res := new(streaming.Result)")
	g.P("err := streamClient.Stream(ctx, \"", method.GoName, "\", nil, res)")
	g.P("if err != nil {")
	g.P("return nil, err")
	g.P("}")

	streamClientName := lowwerName(serviceName) + method.GoName + "Client"
	g.P("stream := &", streamClientName, "{res.Stream}")
	if method.Desc.IsStreamingServer() && !method.Desc.IsStreamingClient() {
		g.P("if err := stream.Stream.SendMsg(req); err != nil {")
		g.P("return nil, err")
		g.P("}")
		g.P("if err := stream.Stream.Close(); err != nil {")
		g.P("return nil, err")
		g.P("}")
	}
	g.P("return stream, nil")

	g.P("}")
	g.P()

	// streamClient struct
	g.P("type ", streamClientName, " struct {")
	g.P(g.QualifiedGoIdent(streamPkg.Ident("Stream")))
	g.P("}")
	g.P()

	if method.Desc.IsStreamingClient() {
		g.P("func (x *", streamClientName, ") Send(m *", method.Input.GoIdent, ") error {")
		g.P("return x.Stream.SendMsg(m)")
		g.P("}")
		g.P()
	}

	if method.Desc.IsStreamingServer() {
		g.P("func (x *", streamClientName, ") Recv() (*", method.Output.GoIdent, ", error) {")
		g.P("m := new(", method.Output.GoIdent, ")")
		g.P("return m, x.Stream.RecvMsg(m)")
		g.P("}")
		g.P()
	}
	if !method.Desc.IsStreamingServer() {
		g.P("func (x *", streamClientName, ") CloseAndRecv() (*", method.Output.GoIdent, ", error) {")
		g.P("if err := x.Stream.Close(); err != nil {")
		g.P("return nil, err")
		g.P("}")
		g.P("m := new(", method.Output.GoIdent, ")")
		g.P("return m, x.Stream.RecvMsg(m)")
		g.P("}")
		g.P()
	}
	g.P()
}

func genClientMethod(g *protogen.GeneratedFile, method *protogen.Method) {
	methodName := method.Desc.Name()
	if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
		g.P(deprecationComment)
	}
	g.P("func (c *KClient)", methodSignature(g, method), "{")
	g.P("var _args ", methodName+"Args")
	g.P("_args.Req = in")
	g.P("var _result ", methodName+"Result")
	methodNameStr := `"` + methodName + `"`
	g.P(fmt.Sprintf("if err := c.c.Call(ctx, %s, &_args, &_result); err != nil {", methodNameStr))
	g.P("return nil, err")
	g.P("}")
	g.P("return _result.GetSuccess(), nil")
	g.P("}")
	g.P()
}

func methodSignature(g *protogen.GeneratedFile, method *protogen.Method) string {
	s := method.GoName + "(ctx " + g.QualifiedGoIdent(contextPackage.Ident("Context"))
	s += ", in *" + g.QualifiedGoIdent(method.Input.GoIdent) + ") ("
	s += "*" + g.QualifiedGoIdent(method.Output.GoIdent) + ", error)"
	return s
}

func clientStreamMethodSignature(serviceName string, g *protogen.GeneratedFile, method *protogen.Method) string {
	s := method.GoName + "(ctx " + g.QualifiedGoIdent(contextPackage.Ident("Context"))
	if method.Desc.IsStreamingClient() {
		s += ") ("
	}
	if !method.Desc.IsStreamingClient() && method.Desc.IsStreamingServer() {
		s += ", req *" + g.QualifiedGoIdent(method.Input.GoIdent) + ") ("
	}
	resName := serviceName + "_" + method.GoName + "Client, error)"
	s += resName
	return s
}

// server stream method
func serverStreamMethodSignature(serviceName string, g *protogen.GeneratedFile, method *protogen.Method) string {
	s := method.GoName + "("
	streamName := serviceName + "_" + method.GoName
	if (method.Desc.IsStreamingClient() && !method.Desc.IsStreamingServer()) ||
		(method.Desc.IsStreamingServer() && method.Desc.IsStreamingClient()) {
		s += "stream " + streamName + ")"
	}
	if !method.Desc.IsStreamingClient() && method.Desc.IsStreamingServer() {
		s += "req *" + g.QualifiedGoIdent(method.Input.GoIdent) + ", stream " + streamName + ")"
	}
	s += " (err error)"
	return s
}

func streamInterfaceSignature(serviceName string, g *protogen.GeneratedFile, method *protogen.Method) {
	streamName := serviceName + "_" + method.GoName
	g.P("type " + streamName + " interface {")
	g.P(g.QualifiedGoIdent(streamPkg.Ident("Stream")))
	if method.Desc.IsStreamingClient() && !method.Desc.IsStreamingServer() {
		g.P("Recv() (*", method.Input.GoIdent, ", error)")
		g.P("SendAndClose(*", method.Output.GoIdent, ") error")
	}

	if !method.Desc.IsStreamingClient() && method.Desc.IsStreamingServer() {
		g.P("Send(*", method.Output.GoIdent, ") error")
	}

	if method.Desc.IsStreamingClient() && method.Desc.IsStreamingServer() {
		g.P("Recv() (*", method.Input.GoIdent, ", error)")
		g.P("Send(*", method.Output.GoIdent, ") error")
	}
	g.P("}")
}

func lowwerName(s string) string {
	if s == "" {
		return ""
	}
	return strings.ToLower(s[:1]) + s[1:]
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknow)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}
