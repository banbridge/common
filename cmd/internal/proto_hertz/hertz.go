package proto_hertz

import (
	"fmt"
	"strings"

	"google.golang.org/genproto/googleapis/api/annotations"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	contextPkg         = protogen.GoImportPath("context")
	appPkg             = protogen.GoImportPath("github.com/cloudwego/hertz/pkg/app")
	hertzPkg           = protogen.GoImportPath("github.com/cloudwego/hertz/pkg/route")
	errorxPkg          = protogen.GoImportPath("github.com/banbridge/common/pkg/errors")
	deprecationComment = "// Deprecated: Do not use."
)

var methodSets = make(map[string]int)

func generateFile(gen *protogen.Plugin, file *protogen.File, omitempty bool) *protogen.GeneratedFile {
	if len(file.Services) == 0 || (omitempty && !hasHTTPRule(file.Services)) {
		return nil
	}

	filename := file.GeneratedFilenamePrefix + ".pb.hertz.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-hertz. DO NOT EDIT.")
	g.P("// version: ")
	g.P(fmt.Sprintf("// - protoc-gen-go-hertz %s", version))
	g.P("// - protoc              ", protocVersion(gen))
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	generateFileConent(gen, file, g, omitempty)
	return g
}

func generateFileConent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, omitempty bool) {
	if len(file.Services) == 0 {
		return
	}
	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the hertz package it is being compiled against.")
	g.P("//", contextPkg.Ident(""))
	g.P("//", appPkg.Ident(""))
	g.P("//", hertzPkg.Ident(""))
	// g.P("//", errorxPkg.Ident(""))
	g.P()

	for _, service := range file.Services {
		genService(gen, file, g, service, omitempty)
	}
}

func genService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service, omitempty bool) {
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}

	// HTTP Server
	sd := &serviceDesc{
		Name:     service.GoName,
		FullName: string(service.Desc.FullName()),
		FilePath: file.Desc.Path(),
	}

	for _, method := range service.Methods {
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			continue
		}

		// 存在 http rule 配置
		rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
		if rule != nil && ok {
			for _, bind := range rule.AdditionalBindings {
				sd.Methods = append(sd.Methods, buildHTTPRule(method, bind))
			}
			sd.Methods = append(sd.Methods, buildHTTPRule(method, rule))
		}
		// } else {
		// 不存在走默认流程
		// sd.Methods = append(sd.Methods, defaultMethod(method))
		// }
	}

	g.P(sd.execute())
}

func buildHTTPRule(m *protogen.Method, rule *annotations.HttpRule) *methodDesc {
	var (
		path         string
		method       string
		responseBody string
	)
	switch pattern := rule.Pattern.(type) {
	case *annotations.HttpRule_Get:
		path = pattern.Get
		method = "GET"
	case *annotations.HttpRule_Put:
		path = pattern.Put
		method = "PUT"
	case *annotations.HttpRule_Post:
		path = pattern.Post
		method = "POST"
	case *annotations.HttpRule_Delete:
		path = pattern.Delete
		method = "DELETE"
	case *annotations.HttpRule_Patch:
		path = pattern.Patch
		method = "PATCH"
	case *annotations.HttpRule_Custom:
		path = pattern.Custom.Path
		method = pattern.Custom.Kind
	}
	respBody := strings.ToLower(rule.ResponseBody)
	if respBody == "" || (respBody != "raw" && respBody != "openapi" && respBody != "custom") {
		responseBody = "raw"
	} else {
		responseBody = respBody
	}

	md := buildMethodDesc(m, method, path, responseBody)
	return md
}

func buildMethodDesc(m *protogen.Method, httpMethod, path, responseBody string) *methodDesc {
	defer func() {
		methodSets[m.GoName]++
	}()
	md := &methodDesc{
		Name:         m.GoName,
		Num:          methodSets[m.GoName],
		Request:      m.Input.GoIdent.GoName,
		Reply:        m.Output.GoIdent.GoName,
		Path:         path,
		Method:       httpMethod,
		ResponseBody: responseBody,
	}
	md.initPathParams()
	return md
}

func hasHTTPRule(services []*protogen.Service) bool {
	for _, service := range services {
		for _, method := range service.Methods {
			if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
				continue
			}
			rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
			if rule != nil && ok {
				return true
			}
		}
	}
	return false
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknow)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}
